name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.13"

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Check stdlib logging kwargs misuse
      run: |
        bash scripts/check_stdlib_logging_kwargs.sh
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=core --cov=services --cov=strategies --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: alpha_panda_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: alpha_panda_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Start Redpanda
      run: |
        docker run -d \
          --name redpanda-test \
          -p 9092:9092 \
          -p 8081:8081 \
          -p 8082:8082 \
          docker.redpanda.com/vectorized/redpanda:latest \
          redpanda start \
          --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092 \
          --advertise-kafka-addr internal://redpanda-test:9092,external://localhost:9092 \
          --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082 \
          --advertise-pandaproxy-addr internal://redpanda-test:8082,external://localhost:8082 \
          --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081 \
          --rpc-addr redpanda-test:33145 \
          --advertise-rpc-addr redpanda-test:33145 \
          --smp 1 \
          --memory 1G \
          --mode dev-container
    
    - name: Wait for Redpanda
      run: |
        timeout 60 bash -c 'until docker exec redpanda-test rpk cluster info; do sleep 2; done'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Initialize test database
      run: |
        PGPASSWORD=test_password psql -h localhost -U alpha_panda_test -d alpha_panda_test -f scripts/init_test_db.sql
    
    - name: Bootstrap test topics
      run: |
        python scripts/bootstrap_test_topics.py
      env:
        REDPANDA_BOOTSTRAP_SERVERS: localhost:9092

    - name: Register Avro schemas
      run: |
        python scripts/register_schemas.py
      env:
        SCHEMA_REGISTRY_URL: http://localhost:8081

    - name: Validate schema compatibility
      run: |
        python scripts/validate_schema_compatibility.py
      env:
        SCHEMA_REGISTRY_URL: http://localhost:8081
        COMPATIBILITY_LEVEL: BACKWARD
    
    - name: Seed test data
      run: |
        python scripts/seed_test_data.py
      env:
        DATABASE_URL: postgresql+asyncpg://alpha_panda_test:test_password@localhost:5432/alpha_panda_test
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short
      env:
        DATABASE__POSTGRES_URL: postgresql+asyncpg://alpha_panda_test:test_password@localhost:5432/alpha_panda_test
        REDPANDA__BOOTSTRAP_SERVERS: localhost:9092
        REDIS__URL: redis://localhost:6379/0

  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Start test infrastructure
      run: |
        docker-compose -f docker-compose.test.yml up -d
    
    - name: Wait for services
      run: |
        timeout 120 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redpanda-test rpk cluster info; do sleep 5; done'
        timeout 120 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres-test pg_isready -U alpha_panda_test; do sleep 5; done'
        timeout 120 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis-test redis-cli ping; do sleep 5; done'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Bootstrap test environment
      run: |
        python scripts/bootstrap_test_topics.py
        python scripts/seed_test_data.py
      env:
        DATABASE_URL: postgresql+asyncpg://alpha_panda_test:test_password@localhost:5433/alpha_panda_test
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/e2e/ -v --tb=short
      env:
        ENVIRONMENT: testing
        DATABASE__POSTGRES_URL: postgresql+asyncpg://alpha_panda_test:test_password@localhost:5433/alpha_panda_test
        REDPANDA__BOOTSTRAP_SERVERS: localhost:19092
        REDIS__URL: redis://localhost:6380/0
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ -v -m "not slow"
    
    - name: Generate performance report
      run: |
        python -c "
import json
from datetime import datetime
report = {
    'timestamp': datetime.now().isoformat(),
    'performance_tests': 'completed',
    'status': 'passed'
}
with open('performance_report.json', 'w') as f:
    json.dump(report, f, indent=2)
        "
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance_report.json

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-scan]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        mkdir -p test-summary
        
        cat > test-summary/README.md << 'EOF'
        # Alpha Panda Test Results Summary
        
        ## Test Pipeline Status
        
        - **Unit Tests**: ${{ needs.unit-tests.result }}
        - **Integration Tests**: ${{ needs.integration-tests.result }}
        - **E2E Tests**: ${{ needs.e2e-tests.result }}
        - **Performance Tests**: ${{ needs.performance-tests.result }}
        - **Security Scan**: ${{ needs.security-scan.result }}
        
        ## Artifacts
        
        - Performance Report: See `performance-report/performance_report.json`
        - Security Reports: See `security-reports/`
        
        Generated on: $(date)
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref }}
        EOF
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary/
